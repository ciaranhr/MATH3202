# -*- coding: utf-8 -*-
"""
Created on Wed Mar 12 15:22:32 2025

MATH3202_A1
Brolga Fire Management
"""
from gurobipy import *
import math

##DATA

# ID, X, Y, Fuel25 (L), Fuel26 (L), Fuel27 (L), Fuel28 (L), Fuel29 (L), Suppressant25 (L), Suppressant26 (L), Suppressant27 (L), Suppressant28 (L), Suppressant29 (L)
Sites = [
[0,264,166,157,182,161,175,151,57,55,56,49,56],
[1,269,239,189,195,190,183,199,58,50,43,40,36],
[2,124,199,158,178,187,190,202,60,71,75,68,67],
[3,247,189,115,98,116,133,145,45,45,43,50,49],
[4,336,61,167,178,169,142,121,59,65,73,80,75],
[5,228,82,196,165,160,170,200,72,79,71,79,85],
[6,278,165,117,99,107,98,84,38,32,33,28,33],
[7,366,214,96,111,100,112,108,27,32,27,31,37],
[8,145,281,246,247,281,329,313,89,96,105,106,123],
[9,291,96,228,261,262,275,305,65,72,64,69,72],
[10,112,40,97,82,69,80,85,38,44,45,50,48],
[11,316,201,179,164,188,178,202,61,62,53,47,46],
[12,28,218,286,281,324,373,305,92,103,88,88,85],
[13,333,27,269,316,282,304,294,98,87,74,87,72],
[14,119,168,131,123,109,99,99,51,56,65,64,71],
[15,179,36,164,180,196,204,230,59,59,67,73,79],
[16,11,39,121,121,107,87,103,39,43,36,31,30],
[17,319,20,100,81,92,74,75,37,44,38,34,31],
[18,42,107,131,108,102,99,115,55,59,50,44,51],
[19,48,78,84,68,81,83,68,32,38,32,27,27],
[20,200,151,260,266,296,347,280,98,78,88,103,116],
[21,84,142,291,308,310,316,272,104,111,105,100,84],
[22,290,167,218,241,217,234,244,63,61,56,55,45],
[23,204,283,0,0,0,0,0,0,0,0,0,0],
[24,20,87,0,0,0,0,0,0,0,0,0,0],
[25,329,179,126,129,110,116,106,44,51,59,66,67],
[26,322,127,93,92,100,108,90,44,53,45,49,44],
[27,338,117,215,186,206,182,172,67,76,69,66,77],
[28,258,62,77,77,72,61,69,22,23,21,20,24],
[29,375,289,91,89,72,65,69,30,33,28,23,24],
[30,278,130,185,209,200,167,143,67,54,55,60,48],
[31,154,50,178,174,204,168,197,76,83,98,80,82],
[32,199,252,194,220,188,152,177,70,65,74,68,58],
[33,58,243,224,257,228,225,182,75,86,79,92,79],
[34,80,265,222,192,190,211,192,69,63,72,63,56],
[35,68,226,154,139,129,134,145,51,58,51,61,65],
[36,364,225,131,109,121,141,126,45,50,58,60,64],
[37,239,239,155,151,146,122,124,57,55,45,54,53],
[38,329,268,250,254,224,201,202,100,112,96,94,92],
[39,62,28,69,75,60,63,70,24,28,23,20,17],
[40,90,33,220,200,188,176,210,73,81,88,94,95],
[41,114,263,238,255,256,302,339,79,73,71,67,72],
[42,79,200,245,213,242,232,243,96,79,72,60,52],
[43,296,262,194,161,140,121,102,72,78,63,65,61],
[44,35,269,0,0,0,0,0,0,0,0,0,0],
[45,44,26,115,103,85,68,75,49,57,51,48,54],
[46,158,113,136,116,97,96,85,57,53,46,46,55],
[47,309,82,110,117,115,94,98,43,49,58,61,57],
[48,83,288,139,136,143,160,132,55,60,54,56,51],
[49,361,73,262,275,240,198,174,109,92,97,101,99],
[50,280,66,115,106,118,123,127,32,26,30,26,22],
[51,234,271,244,286,295,317,306,93,98,88,79,73],
[52,267,279,133,133,156,166,196,40,41,48,50,59],
[53,139,105,147,142,121,101,115,50,41,39,38,39],
[54,228,57,91,75,79,87,86,28,32,38,35,40],
[55,206,94,0,0,0,0,0,0,0,0,0,0]]

# ID, Site1, Site2, Distance (km), Capacity (L)
Roads = [
[0,39,45,20,1950],
[1,45,39,20,1950],
[2,7,36,11,1650],
[3,36,7,11,1950],
[4,29,36,77,1150],
[5,36,29,77,1900],
[6,7,11,54,1650],
[7,11,7,54,1400],
[8,36,38,56,1050],
[9,38,36,56,1300],
[10,29,38,57,1900],
[11,38,29,57,1850],
[12,11,38,82,1900],
[13,38,11,82,2000],
[14,4,13,34,1800],
[15,13,4,34,1350],
[16,13,17,17,1600],
[17,17,13,17,1800],
[18,4,27,66,1450],
[19,27,4,66,1650],
[20,27,47,48,1850],
[21,47,27,48,1750],
[22,4,47,44,1800],
[23,47,4,44,950],
[24,47,50,34,1150],
[25,50,47,34,1150],
[26,9,47,26,1250],
[27,47,9,26,1300],
[28,9,50,34,1550],
[29,50,9,34,950],
[30,28,50,28,1400],
[31,50,28,28,800],
[32,17,50,69,900],
[33,50,17,69,1600],
[34,4,50,63,1350],
[35,50,4,63,1950],
[36,15,54,68,1900],
[37,54,15,68,1050],
[38,28,54,37,1900],
[39,54,28,37,1350],
[40,5,28,45,900],
[41,28,5,45,1650],
[42,5,9,72,1700],
[43,9,5,72,1350],
[44,5,54,29,1350],
[45,54,5,29,1250],
[46,16,24,63,1950],
[47,24,16,63,1250],
[48,14,53,67,1800],
[49,53,14,67,850],
[50,14,21,56,1550],
[51,21,14,56,1500],
[52,21,53,82,1450],
[53,53,21,82,1500],
[54,2,14,39,1200],
[55,14,2,39,1700],
[56,12,42,57,1900],
[57,42,12,57,1100],
[58,21,42,61,1350],
[59,42,21,61,1250],
[60,14,42,65,1200],
[61,42,14,65,900],
[62,2,42,47,1050],
[63,42,2,47,1650],
[64,7,25,61,1850],
[65,25,7,61,1300],
[66,11,25,28,1200],
[67,25,11,28,1900],
[68,27,49,58,850],
[69,49,27,58,1800],
[70,4,49,34,1250],
[71,49,4,34,1050],
[72,5,30,71,1950],
[73,30,5,71,1550],
[74,9,30,37,1050],
[75,30,9,37,1650],
[76,20,55,59,1900],
[77,55,20,59,1800],
[78,5,55,27,900],
[79,55,5,27,1000],
[80,54,55,48,1550],
[81,55,54,48,2000],
[82,15,55,80,950],
[83,55,15,80,1800],
[84,1,3,64,1450],
[85,3,1,64,1750],
[86,3,11,75,900],
[87,11,3,75,950],
[88,1,11,61,1650],
[89,11,1,61,1150],
[90,0,3,30,1650],
[91,3,0,30,1650],
[92,3,20,66,1100],
[93,20,3,66,1400],
[94,38,43,36,1400],
[95,43,38,36,900],
[96,11,43,68,1850],
[97,43,11,68,850],
[98,1,43,43,1450],
[99,43,1,43,1100],
[100,10,31,56,1850],
[101,31,10,56,1750],
[102,15,31,33,1400],
[103,31,15,33,1250],
[104,31,53,73,1150],
[105,53,31,73,1150],
[106,10,53,82,2000],
[107,53,10,82,850],
[108,19,39,66,1050],
[109,39,19,66,1250],
[110,16,19,57,1350],
[111,19,16,57,1150],
[112,16,45,36,850],
[113,45,16,36,1600],
[114,19,24,32,1950],
[115,24,19,32,1200],
[116,20,46,68,850],
[117,46,20,68,1550],
[118,46,53,23,1250],
[119,53,46,23,2000],
[120,46,55,61,1600],
[121,55,46,61,1200],
[122,35,42,35,1650],
[123,42,35,35,1600],
[124,35,41,59,1350],
[125,41,35,59,1900],
[126,2,41,83,1850],
[127,41,2,83,2000],
[128,8,41,37,1350],
[129,41,8,37,1450],
[130,8,48,81,1900],
[131,48,8,81,1000],
[132,8,23,63,1500],
[133,23,8,63,1800],
[134,41,48,43,1600],
[135,48,41,43,1600],
[136,6,30,40,1400],
[137,30,6,40,1350],
[138,0,6,17,1900],
[139,6,0,17,950],
[140,25,26,60,1300],
[141,26,25,60,1500],
[142,26,27,23,1250],
[143,27,26,23,1300],
[144,26,30,49,1100],
[145,30,26,49,1250],
[146,9,26,46,1150],
[147,26,9,46,1050],
[148,8,32,64,1950],
[149,32,8,64,950],
[150,23,32,33,1100],
[151,32,23,33,1500],
[152,43,52,39,1300],
[153,52,43,39,1950],
[154,1,52,42,1350],
[155,52,1,42,1850],
[156,39,40,30,2000],
[157,40,39,30,1650],
[158,10,40,29,1000],
[159,40,10,29,1000],
[160,18,19,31,1250],
[161,19,18,31,2000],
[162,18,21,70,1250],
[163,21,18,70,1850],
[164,18,24,32,1000],
[165,24,18,32,1350],
[166,34,41,42,1650],
[167,41,34,42,1200],
[168,34,48,27,1600],
[169,48,34,27,1600],
[170,34,44,51,1650],
[171,44,34,51,1700],
[172,22,26,53,1250],
[173,26,22,53,1300],
[174,22,25,50,1450],
[175,25,22,50,1550],
[176,11,22,47,850],
[177,22,11,47,1150],
[178,6,22,13,1750],
[179,22,6,13,850],
[180,3,37,65,1600],
[181,37,3,65,1050],
[182,1,37,32,2000],
[183,37,1,32,900],
[184,32,37,54,1500],
[185,37,32,54,1950],
[186,33,34,35,950],
[187,34,33,35,1900],
[188,33,44,35,1050],
[189,44,33,35,1400],
[190,33,35,24,900],
[191,35,33,24,1300],
[192,12,33,41,1050],
[193,33,12,41,1050],
[194,12,44,52,1800],
[195,44,12,52,900],
[196,51,52,40,1950],
[197,52,51,40,800],
[198,1,51,50,1100],
[199,51,1,50,1100],
[200,37,51,33,1650],
[201,51,37,33,1150],
[202,23,51,39,800],
[203,51,23,39,1350],
[204,32,51,42,1550],
[205,51,32,42,1250]]

# Warehouse Data
# Maximum Stock/ Capacity (L) and Cost ($/L) for (fuel, suppressant) each warehouse node
#capacity = { 23: 2700, 24: 2500, 44: 2300, 55: 2300}
#cost = { 23: 4.95, 24: 8.84, 44: 5.76, 55: 6.97}
capacity = { 23: (2700, 1100), 24: (2500,900), 44: (2300,900), 55: (2300,900)}
cost = { 23: (4.95,1.87), 24: (8.84,4.61), 44: (5.76,2.58), 55: (6.97,1.99)}

# Maximum Stock/ Capacity (L) and Cost ($/L) for suppressant at each warehouse node
#capacity_s = { 23: 1100, 24: 900, 44: 900, 55: 900}
#cost_s = { 23: 1.87, 24: 4.61, 44: 2.58, 55: 1.99}

# Cost of transporting fuel along a road {year: cost/L/km}
#loss = 0.81
loss = {0:0.81, 1:0.85, 2:0.87, 3:0.94, 4:0.98 }

# Percentage loss of fuel due to evaporation per km of transport on road
evap = 0.05 #(%/km)

# Maximum storage capacity at each burn site node (L)
storage = 150 

N = range(len(Sites))
R = range(len(Roads))
T = range(len(loss))

m = Model("Brolga")

# Variables
# X[n] amount of fuel to purchase at a node n (L)
X = {(n,t): m.addVar() for n in N for t in T}
# Z[n] amount of suppressant to purchase at node n (L)
Z = {(n,t): m.addVar() for n in N for t in T}

# Y[r] amount of fuel to send on road r (L)
Y = {(r,t): m.addVar() for r in R for t in T}
# V[r] amount of suppressant to send on road r (L)
V = {(r,t): m.addVar() for r in R for t in T}

# F[n] amount of fuel to store at a node n (L)
F = {(n,t): m.addVar() for n in N for t in T}
# S[n] amount of fuel to store at a node n (L)
S = {(n,t): m.addVar() for n in N for t in T}

# Objective
# Minimise total cost of fuel and transport
m.setObjective(quicksum(cost[w][0]*X[w,t]+cost[w][1]*Z[w,t] for w in cost for t in T) +
               quicksum(loss[t]*(Y[r,t]+V[r,t])*Roads[r][3] for r in R for t in T))


# Constraints
# Production
for t in T:
    # Production
    for n in N:
        if n in capacity:
            m.addConstr(X[n,t] <= capacity[n][0])
            m.addConstr(Z[n,t] <= capacity[n][1])
        else:
            m.addConstr(X[n,t] <= 0)
            m.addConstr(Z[n,t] <= 0)
    
    # Flow balance
    for n in N:
        # Fuel balance
        m.addConstr(X[n,t] + quicksum(
            (1-evap*Roads[r][3]/100)*Y[r,t] for r in R if Roads[r][2] == n) == 
                    F[n,t] + Sites[n][3+t] +
                      quicksum(Y[r,t] for r in R if Roads[r][1] == n))
        #Suppressant balance
        m.addConstr(Z[n,t] + quicksum(V[r,t] for r in R if Roads[r][2] == n) ==
                    S[n,t] + Sites[n][8+t] + quicksum(V[r,t] for r in R if Roads[r][1] == n))
        
    # Road Capacity
    for r in R:
        m.addConstr(Y[r,t] + V[r,t] <= Roads[r][4])
        
    # Fuel Storage 
    for n in N:
        if n in capacity:
            m.addConstr(F[n,t] <= 0)
            m.addConstr(S[n,t] <= 0)
        else:
            m.addConstr(F[n,t] + S[n,t] <= 150)
            if t > 0:
                m.addConstr(S[n,t] == S[n,t-1] + X[n,t] - X[i,t])
                m.addConstr(F[n,t] <= 0)
                m.addConstr(S[n,t] <= 0)
            else:

m.optimize()

print("Total cost $",round(m.ObjVal,2))
for t in T:
    print("Year: ", t)
    for w in cost:
        print("Warehouse",w,":",round(X[w,t].x,2), "L")

for t in T:
    print("Year: ", t)
    for n in N:
        print("node", n, ":", round(F[n,t].x,2), "L")


# F_req = quicksum(Sites[n][3] for n in N)
# print("total fuel req:", F_req)

# R_tot = quicksum(Roads[r][3] for r in R)
# print("total length of roads:", R_tot)
        