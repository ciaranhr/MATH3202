# -*- coding: utf-8 -*-
"""
Created on Wed Mar 12 15:22:32 2025

MATH3202_A1
Brolga Fire Management
"""
from gurobipy import *
import math

##DATA

# ID, X, Y, Fuel needed (L)
Sites = [
[0,264,166,157],
[1,269,239,189],
[2,124,199,158],
[3,247,189,115],
[4,336,61,167],
[5,228,82,196],
[6,278,165,117],
[7,366,214,96],
[8,145,281,246],
[9,291,96,228],
[10,112,40,97],
[11,316,201,179],
[12,28,218,286],
[13,333,27,269],
[14,119,168,131],
[15,179,36,164],
[16,11,39,121],
[17,319,20,100],
[18,42,107,131],
[19,48,78,84],
[20,200,151,260],
[21,84,142,291],
[22,290,167,218],
[23,204,283,0],  #Warehouse A
[24,20,87,0],    #Warehouse B
[25,329,179,126],
[26,322,127,93],
[27,338,117,215],
[28,258,62,77],
[29,375,289,91],
[30,278,130,185],
[31,154,50,178],
[32,199,252,194],
[33,58,243,224],
[34,80,265,222],
[35,68,226,154],
[36,364,225,131],
[37,239,239,155],
[38,329,268,250],
[39,62,28,69],
[40,90,33,220],
[41,114,263,238],
[42,79,200,245],
[43,296,262,194],
[44,35,269,0],   #Warehouse C
[45,44,26,115],
[46,158,113,136],
[47,309,82,110],
[48,83,288,139],
[49,361,73,262],
[50,280,66,115],
[51,234,271,244],
[52,267,279,133],
[53,139,105,147],
[54,228,57,91],
[55,206,94,0]]   #Warehouse D

# ID, Site1, Site2, Distance (km)
Roads = [
[0,39,45,20],
[1,45,39,20],
[2,7,36,11],
[3,36,7,11],
[4,29,36,77],
[5,36,29,77],
[6,7,11,54],
[7,11,7,54],
[8,36,38,56],
[9,38,36,56],
[10,29,38,57],
[11,38,29,57],
[12,11,38,82],
[13,38,11,82],
[14,4,13,34],
[15,13,4,34],
[16,13,17,17],
[17,17,13,17],
[18,4,27,66],
[19,27,4,66],
[20,27,47,48],
[21,47,27,48],
[22,4,47,44],
[23,47,4,44],
[24,47,50,34],
[25,50,47,34],
[26,9,47,26],
[27,47,9,26],
[28,9,50,34],
[29,50,9,34],
[30,28,50,28],
[31,50,28,28],
[32,17,50,69],
[33,50,17,69],
[34,4,50,63],
[35,50,4,63],
[36,15,54,68],
[37,54,15,68],
[38,28,54,37],
[39,54,28,37],
[40,5,28,45],
[41,28,5,45],
[42,5,9,72],
[43,9,5,72],
[44,5,54,29],
[45,54,5,29],
[46,16,24,63],
[47,24,16,63],
[48,14,53,67],
[49,53,14,67],
[50,14,21,56],
[51,21,14,56],
[52,21,53,82],
[53,53,21,82],
[54,2,14,39],
[55,14,2,39],
[56,12,42,57],
[57,42,12,57],
[58,21,42,61],
[59,42,21,61],
[60,14,42,65],
[61,42,14,65],
[62,2,42,47],
[63,42,2,47],
[64,7,25,61],
[65,25,7,61],
[66,11,25,28],
[67,25,11,28],
[68,27,49,58],
[69,49,27,58],
[70,4,49,34],
[71,49,4,34],
[72,5,30,71],
[73,30,5,71],
[74,9,30,37],
[75,30,9,37],
[76,20,55,59],
[77,55,20,59],
[78,5,55,27],
[79,55,5,27],
[80,54,55,48],
[81,55,54,48],
[82,15,55,80],
[83,55,15,80],
[84,1,3,64],
[85,3,1,64],
[86,3,11,75],
[87,11,3,75],
[88,1,11,61],
[89,11,1,61],
[90,0,3,30],
[91,3,0,30],
[92,3,20,66],
[93,20,3,66],
[94,38,43,36],
[95,43,38,36],
[96,11,43,68],
[97,43,11,68],
[98,1,43,43],
[99,43,1,43],
[100,10,31,56],
[101,31,10,56],
[102,15,31,33],
[103,31,15,33],
[104,31,53,73],
[105,53,31,73],
[106,10,53,82],
[107,53,10,82],
[108,19,39,66],
[109,39,19,66],
[110,16,19,57],
[111,19,16,57],
[112,16,45,36],
[113,45,16,36],
[114,19,24,32],
[115,24,19,32],
[116,20,46,68],
[117,46,20,68],
[118,46,53,23],
[119,53,46,23],
[120,46,55,61],
[121,55,46,61],
[122,35,42,35],
[123,42,35,35],
[124,35,41,59],
[125,41,35,59],
[126,2,41,83],
[127,41,2,83],
[128,8,41,37],
[129,41,8,37],
[130,8,48,81],
[131,48,8,81],
[132,8,23,63],
[133,23,8,63],
[134,41,48,43],
[135,48,41,43],
[136,6,30,40],
[137,30,6,40],
[138,0,6,17],
[139,6,0,17],
[140,25,26,60],
[141,26,25,60],
[142,26,27,23],
[143,27,26,23],
[144,26,30,49],
[145,30,26,49],
[146,9,26,46],
[147,26,9,46],
[148,8,32,64],
[149,32,8,64],
[150,23,32,33],
[151,32,23,33],
[152,43,52,39],
[153,52,43,39],
[154,1,52,42],
[155,52,1,42],
[156,39,40,30],
[157,40,39,30],
[158,10,40,29],
[159,40,10,29],
[160,18,19,31],
[161,19,18,31],
[162,18,21,70],
[163,21,18,70],
[164,18,24,32],
[165,24,18,32],
[166,34,41,42],
[167,41,34,42],
[168,34,48,27],
[169,48,34,27],
[170,34,44,51],
[171,44,34,51],
[172,22,26,53],
[173,26,22,53],
[174,22,25,50],
[175,25,22,50],
[176,11,22,47],
[177,22,11,47],
[178,6,22,13],
[179,22,6,13],
[180,3,37,65],
[181,37,3,65],
[182,1,37,32],
[183,37,1,32],
[184,32,37,54],
[185,37,32,54],
[186,33,34,35],
[187,34,33,35],
[188,33,44,35],
[189,44,33,35],
[190,33,35,24],
[191,35,33,24],
[192,12,33,41],
[193,33,12,41],
[194,12,44,52],
[195,44,12,52],
[196,51,52,40],
[197,52,51,40],
[198,1,51,50],
[199,51,1,50],
[200,37,51,33],
[201,51,37,33],
[202,23,51,39],
[203,51,23,39],
[204,32,51,42],
[205,51,32,42]]

# Warehouse Data
# Maximum Stock/ Capacity (L) and Cost ($/L) for each warehouse node
capacity = { 23: 2700, 24: 2500, 44: 2300, 55: 2300}
cost = { 23: 4.95, 24: 8.84, 44: 5.76, 55: 6.97}

#Cost of transporting fuel along a road
loss = 0.81 #$/L/km

N = range(len(Sites))
R = range(len(Roads))

m = Model("Brolga")

# Variables
# X[n] amount of fuel to purchase at a node n (L)
X = { n: m.addVar() for n in N }

# Y[e] amount of fuel to send on road r
Y = { r: m.addVar() for r in R }

# Objective
# Minimise total cost of fuel and transport
m.setObjective(quicksum(cost[w]*X[w] for w in cost) + quicksum(loss*Roads[r][3]*Y[r] for r in R))


# Constraints
# Production
for n in N:
    if n in capacity:
        m.addConstr(X[n] <= capacity[n])
    else:
        m.addConstr(X[n] <= 0)

# Flow balance
for n in N:
    m.addConstr(X[n] + quicksum(Y[r] for r in R if Roads[r][1] == n) == 
                Sites[n][3] + quicksum(Y[r] for r in R if Roads[r][2] == n))

m.optimize()

print("Total cost $",m.ObjVal)
for w in cost:
    print("Warehouse",w,":",X[w].x, "L")


F_req = quicksum(Sites[n][3] for n in N)
print("total fuel req:", F_req)

R_tot = quicksum(Roads[r][3] for r in R)
print("total length of roads:", R_tot)
        