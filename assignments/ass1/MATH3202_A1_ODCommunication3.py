# -*- coding: utf-8 -*-
"""
Created on Wed Mar 12 15:22:32 2025

MATH3202_A1
Brolga Fire Management
"""
from gurobipy import *
import math

##DATA

# ID, X, Y, Fuel needed (L)
Sites = [
[0,264,166,157],
[1,269,239,189],
[2,124,199,158],
[3,247,189,115],
[4,336,61,167],
[5,228,82,196],
[6,278,165,117],
[7,366,214,96],
[8,145,281,246],
[9,291,96,228],
[10,112,40,97],
[11,316,201,179],
[12,28,218,286],
[13,333,27,269],
[14,119,168,131],
[15,179,36,164],
[16,11,39,121],
[17,319,20,100],
[18,42,107,131],
[19,48,78,84],
[20,200,151,260],
[21,84,142,291],
[22,290,167,218],
[23,204,283,0],  #Warehouse A
[24,20,87,0],    #Warehouse B
[25,329,179,126],
[26,322,127,93],
[27,338,117,215],
[28,258,62,77],
[29,375,289,91],
[30,278,130,185],
[31,154,50,178],
[32,199,252,194],
[33,58,243,224],
[34,80,265,222],
[35,68,226,154],
[36,364,225,131],
[37,239,239,155],
[38,329,268,250],
[39,62,28,69],
[40,90,33,220],
[41,114,263,238],
[42,79,200,245],
[43,296,262,194],
[44,35,269,0],   #Warehouse C
[45,44,26,115],
[46,158,113,136],
[47,309,82,110],
[48,83,288,139],
[49,361,73,262],
[50,280,66,115],
[51,234,271,244],
[52,267,279,133],
[53,139,105,147],
[54,228,57,91],
[55,206,94,0]]   #Warehouse D

# ID, Site1, Site2, Distance (km), Capacity (L)
Roads = [
[0,39,45,20,1950],
[1,45,39,20,1950],
[2,7,36,11,1650],
[3,36,7,11,1950],
[4,29,36,77,1150],
[5,36,29,77,1900],
[6,7,11,54,1650],
[7,11,7,54,1400],
[8,36,38,56,1050],
[9,38,36,56,1300],
[10,29,38,57,1900],
[11,38,29,57,1850],
[12,11,38,82,1900],
[13,38,11,82,2000],
[14,4,13,34,1800],
[15,13,4,34,1350],
[16,13,17,17,1600],
[17,17,13,17,1800],
[18,4,27,66,1450],
[19,27,4,66,1650],
[20,27,47,48,1850],
[21,47,27,48,1750],
[22,4,47,44,1800],
[23,47,4,44,950],
[24,47,50,34,1150],
[25,50,47,34,1150],
[26,9,47,26,1250],
[27,47,9,26,1300],
[28,9,50,34,1550],
[29,50,9,34,950],
[30,28,50,28,1400],
[31,50,28,28,800],
[32,17,50,69,900],
[33,50,17,69,1600],
[34,4,50,63,1350],
[35,50,4,63,1950],
[36,15,54,68,1900],
[37,54,15,68,1050],
[38,28,54,37,1900],
[39,54,28,37,1350],
[40,5,28,45,900],
[41,28,5,45,1650],
[42,5,9,72,1700],
[43,9,5,72,1350],
[44,5,54,29,1350],
[45,54,5,29,1250],
[46,16,24,63,1950],
[47,24,16,63,1250],
[48,14,53,67,1800],
[49,53,14,67,850],
[50,14,21,56,1550],
[51,21,14,56,1500],
[52,21,53,82,1450],
[53,53,21,82,1500],
[54,2,14,39,1200],
[55,14,2,39,1700],
[56,12,42,57,1900],
[57,42,12,57,1100],
[58,21,42,61,1350],
[59,42,21,61,1250],
[60,14,42,65,1200],
[61,42,14,65,900],
[62,2,42,47,1050],
[63,42,2,47,1650],
[64,7,25,61,1850],
[65,25,7,61,1300],
[66,11,25,28,1200],
[67,25,11,28,1900],
[68,27,49,58,850],
[69,49,27,58,1800],
[70,4,49,34,1250],
[71,49,4,34,1050],
[72,5,30,71,1950],
[73,30,5,71,1550],
[74,9,30,37,1050],
[75,30,9,37,1650],
[76,20,55,59,1900],
[77,55,20,59,1800],
[78,5,55,27,900],
[79,55,5,27,1000],
[80,54,55,48,1550],
[81,55,54,48,2000],
[82,15,55,80,950],
[83,55,15,80,1800],
[84,1,3,64,1450],
[85,3,1,64,1750],
[86,3,11,75,900],
[87,11,3,75,950],
[88,1,11,61,1650],
[89,11,1,61,1150],
[90,0,3,30,1650],
[91,3,0,30,1650],
[92,3,20,66,1100],
[93,20,3,66,1400],
[94,38,43,36,1400],
[95,43,38,36,900],
[96,11,43,68,1850],
[97,43,11,68,850],
[98,1,43,43,1450],
[99,43,1,43,1100],
[100,10,31,56,1850],
[101,31,10,56,1750],
[102,15,31,33,1400],
[103,31,15,33,1250],
[104,31,53,73,1150],
[105,53,31,73,1150],
[106,10,53,82,2000],
[107,53,10,82,850],
[108,19,39,66,1050],
[109,39,19,66,1250],
[110,16,19,57,1350],
[111,19,16,57,1150],
[112,16,45,36,850],
[113,45,16,36,1600],
[114,19,24,32,1950],
[115,24,19,32,1200],
[116,20,46,68,850],
[117,46,20,68,1550],
[118,46,53,23,1250],
[119,53,46,23,2000],
[120,46,55,61,1600],
[121,55,46,61,1200],
[122,35,42,35,1650],
[123,42,35,35,1600],
[124,35,41,59,1350],
[125,41,35,59,1900],
[126,2,41,83,1850],
[127,41,2,83,2000],
[128,8,41,37,1350],
[129,41,8,37,1450],
[130,8,48,81,1900],
[131,48,8,81,1000],
[132,8,23,63,1500],
[133,23,8,63,1800],
[134,41,48,43,1600],
[135,48,41,43,1600],
[136,6,30,40,1400],
[137,30,6,40,1350],
[138,0,6,17,1900],
[139,6,0,17,950],
[140,25,26,60,1300],
[141,26,25,60,1500],
[142,26,27,23,1250],
[143,27,26,23,1300],
[144,26,30,49,1100],
[145,30,26,49,1250],
[146,9,26,46,1150],
[147,26,9,46,1050],
[148,8,32,64,1950],
[149,32,8,64,950],
[150,23,32,33,1100],
[151,32,23,33,1500],
[152,43,52,39,1300],
[153,52,43,39,1950],
[154,1,52,42,1350],
[155,52,1,42,1850],
[156,39,40,30,2000],
[157,40,39,30,1650],
[158,10,40,29,1000],
[159,40,10,29,1000],
[160,18,19,31,1250],
[161,19,18,31,2000],
[162,18,21,70,1250],
[163,21,18,70,1850],
[164,18,24,32,1000],
[165,24,18,32,1350],
[166,34,41,42,1650],
[167,41,34,42,1200],
[168,34,48,27,1600],
[169,48,34,27,1600],
[170,34,44,51,1650],
[171,44,34,51,1700],
[172,22,26,53,1250],
[173,26,22,53,1300],
[174,22,25,50,1450],
[175,25,22,50,1550],
[176,11,22,47,850],
[177,22,11,47,1150],
[178,6,22,13,1750],
[179,22,6,13,850],
[180,3,37,65,1600],
[181,37,3,65,1050],
[182,1,37,32,2000],
[183,37,1,32,900],
[184,32,37,54,1500],
[185,37,32,54,1950],
[186,33,34,35,950],
[187,34,33,35,1900],
[188,33,44,35,1050],
[189,44,33,35,1400],
[190,33,35,24,900],
[191,35,33,24,1300],
[192,12,33,41,1050],
[193,33,12,41,1050],
[194,12,44,52,1800],
[195,44,12,52,900],
[196,51,52,40,1950],
[197,52,51,40,800],
[198,1,51,50,1100],
[199,51,1,50,1100],
[200,37,51,33,1650],
[201,51,37,33,1150],
[202,23,51,39,800],
[203,51,23,39,1350],
[204,32,51,42,1550],
[205,51,32,42,1250]]

# Warehouse Data
# Maximum Stock/ Capacity (L) and Cost ($/L) for each warehouse node
capacity = { 23: 2700, 24: 2500, 44: 2300, 55: 2300}
cost = { 23: 4.95, 24: 8.84, 44: 5.76, 55: 6.97}

#Cost of transporting fuel along a road
loss = 0.81 #$/L/km

#Percentage loss of fuel due to evaporation per km of transport on road
evap = 0.05 #(%/km)


N = range(len(Sites))
R = range(len(Roads))

m = Model("Brolga")

# Variables
# X[n] amount of fuel to purchase at a node n (L)
X = { n: m.addVar() for n in N }

# Y[e] amount of fuel to send on road r
Y = { r: m.addVar() for r in R }

# Objective
# Minimise total cost of fuel and transport
m.setObjective(quicksum(cost[w]*X[w] for w in cost) + quicksum(loss*Y[r]*Roads[r][3] for r in R))
#m.setObjective(quicksum(cost[w]*X[w] for w in cost)) #Total cost of fuel


# Constraints
# Production
for n in N:
    if n in capacity:
        m.addConstr(X[n] <= capacity[n])
    else:
        m.addConstr(X[n] <= 0)

# Flow balance
for n in N:
    m.addConstr(X[n] + quicksum((1-evap*Roads[r][3]/100)*Y[r] for r in R if Roads[r][2] == n) == 
                Sites[n][3] + quicksum(Y[r] for r in R if Roads[r][1] == n))

# Road Capacity
for r in R:
    m.addConstr(Y[r] <= Roads[r][4])

m.optimize()

print("Total cost $",m.ObjVal)
for w in cost:
    print("Warehouse",w,":",X[w].x, "L")


F_req = quicksum(Sites[n][3] for n in N)
print("total fuel req:", F_req)

R_tot = quicksum(Roads[r][3] for r in R)
print("total length of roads:", R_tot)
        